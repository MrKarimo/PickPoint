// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PickPoint.DataBase;

namespace PickPoint.Migrations
{
    [DbContext(typeof(PickPointContext))]
    partial class PickPointContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("PickPoint.Models.Entity.Goods", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("Goods");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OrderId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 2,
                            OrderId = 1,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 3,
                            OrderId = 2,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 4,
                            OrderId = 3,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 5,
                            OrderId = 4,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 6,
                            OrderId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 7,
                            OrderId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 8,
                            OrderId = 5,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 9,
                            OrderId = 5,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 10,
                            OrderId = 5,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 11,
                            OrderId = 6,
                            ProductId = 1
                        },
                        new
                        {
                            Id = 12,
                            OrderId = 6,
                            ProductId = 3
                        },
                        new
                        {
                            Id = 13,
                            OrderId = 6,
                            ProductId = 2
                        },
                        new
                        {
                            Id = 14,
                            OrderId = 6,
                            ProductId = 3
                        });
                });

            modelBuilder.Entity("PickPoint.Models.Entity.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Check")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostamatId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrderStatusId");

                    b.HasIndex("PostamatId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Check = 1000m,
                            OrderStatusId = 1,
                            PhoneNumber = "+79546511269",
                            PostamatId = "1111-111",
                            RecipientName = "Антон"
                        },
                        new
                        {
                            Id = 2,
                            Check = 2000m,
                            OrderStatusId = 2,
                            PhoneNumber = "+79651651269",
                            PostamatId = "1111-111",
                            RecipientName = "Иван"
                        },
                        new
                        {
                            Id = 3,
                            Check = 3000m,
                            OrderStatusId = 3,
                            PhoneNumber = "+79546516512",
                            PostamatId = "2222-222",
                            RecipientName = "Григорий"
                        },
                        new
                        {
                            Id = 4,
                            Check = 4000m,
                            OrderStatusId = 4,
                            PhoneNumber = "+79500232695",
                            PostamatId = "3333-333",
                            RecipientName = "Степан"
                        },
                        new
                        {
                            Id = 5,
                            Check = 5000m,
                            OrderStatusId = 5,
                            PhoneNumber = "+79598410324",
                            PostamatId = "1111-111",
                            RecipientName = "Игорь"
                        },
                        new
                        {
                            Id = 6,
                            Check = 6000m,
                            OrderStatusId = 6,
                            PhoneNumber = "+76541980098",
                            PostamatId = "2222-222",
                            RecipientName = "Кикита"
                        });
                });

            modelBuilder.Entity("PickPoint.Models.Entity.OrderStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OrderStatus");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Status = "Зарегистрирован"
                        },
                        new
                        {
                            Id = 2,
                            Status = "Принят на складе"
                        },
                        new
                        {
                            Id = 3,
                            Status = "Выдан курьеру"
                        },
                        new
                        {
                            Id = 4,
                            Status = "Доставлен в постамат"
                        },
                        new
                        {
                            Id = 5,
                            Status = "Доставлен получателю"
                        },
                        new
                        {
                            Id = 6,
                            Status = "Отменен"
                        });
                });

            modelBuilder.Entity("PickPoint.Models.Entity.Postamat", b =>
                {
                    b.Property<string>("PostamatNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("PostamatNumber");

                    b.ToTable("Postamats");

                    b.HasData(
                        new
                        {
                            PostamatNumber = "1111-111",
                            Address = "Дом 1",
                            Status = true
                        },
                        new
                        {
                            PostamatNumber = "2222-222",
                            Address = "Дом 2",
                            Status = false
                        },
                        new
                        {
                            PostamatNumber = "3333-333",
                            Address = "Дом 3",
                            Status = true
                        });
                });

            modelBuilder.Entity("PickPoint.Models.Entity.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ProductName = "Ноутбук"
                        },
                        new
                        {
                            Id = 2,
                            ProductName = "Телефон"
                        },
                        new
                        {
                            Id = 3,
                            ProductName = "Машина"
                        });
                });

            modelBuilder.Entity("PickPoint.Models.Entity.Goods", b =>
                {
                    b.HasOne("PickPoint.Models.Entity.Order", "Order")
                        .WithMany("Goods")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PickPoint.Models.Entity.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("PickPoint.Models.Entity.Order", b =>
                {
                    b.HasOne("PickPoint.Models.Entity.OrderStatus", "OrderStatus")
                        .WithMany()
                        .HasForeignKey("OrderStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PickPoint.Models.Entity.Postamat", "Postamat")
                        .WithMany()
                        .HasForeignKey("PostamatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
